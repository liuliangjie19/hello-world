cluster.gene(test.snp.m)
cluster.gene <- function(gene){
if (ncol(gene)>20){
distance.gene <- snpStats::ld(gene, gene, stats = "R.squared")
distance.gene <- as.dist(1 - distance.gene)
clust.tree.gene <- rioja::chclust(distance.gene)
k.gene <- cutree(clust.tree.gene, k = 1:(ncol(gene)-20))
max.gene <- sapply(1:(ncol(gene)-30),FUN=function(i){return(max(table(as.factor(k.gene[,i]))))})
id.gene <- which(max.gene<=20)[1]
}
else {
k.gene <- matrix(rep(1, ncol(gene)), ncol = 1)
rownames(k.gene) <- colnames(gene)
max.gene <- ncol(gene)
id.gene <- 1
}
return(list(k.gene, max.gene, id.gene))
}
cluster.gene(test.snp.m)
cluster.gene <- function(gene){
if (ncol(gene)>20){
distance.gene <- snpStats::ld(gene, gene, stats = "R.squared")
distance.gene <- as.dist(1 - distance.gene)
clust.tree.gene <- rioja::chclust(distance.gene)
k.gene <- cutree(clust.tree.gene, k = 1:(ncol(gene)-20))
max.gene <- sapply(1:(ncol(gene)-30),FUN=function(i){return(max(table(as.factor(k.gene[,i]))))})
id.gene <- which(max.gene<=20)[1]
}
else {
k.gene <- matrix(rep(1, ncol(gene)), ncol = 1)
rownames(k.gene) <- colnames(gene)
max.gene <- ncol(gene)
id.gene <- 1
}
division.gene.start <- c(1,1+as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))))
division.gene.end <- c(as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k1[,id.gene][i]!=k1[,id.gene][i+1])}))),ncol(G1))
return(list(division.gene.start, division.gene.end))
}
cluster.gene(test.snp.m)
cluster.gene <- function(gene){
if (ncol(gene)>20){
distance.gene <- snpStats::ld(gene, gene, stats = "R.squared")
distance.gene <- as.dist(1 - distance.gene)
clust.tree.gene <- rioja::chclust(distance.gene)
k.gene <- cutree(clust.tree.gene, k = 1:(ncol(gene)-20))
max.gene <- sapply(1:(ncol(gene)-30),FUN=function(i){return(max(table(as.factor(k.gene[,i]))))})
id.gene <- which(max.gene<=20)[1]
}
else {
k.gene <- matrix(rep(1, ncol(gene)), ncol = 1)
rownames(k.gene) <- colnames(gene)
max.gene <- ncol(gene)
id.gene <- 1
}
division.gene.start <- c(1,1+as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))))
division.gene.end <- c(as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))),ncol(G1))
return(list(division.gene.start, division.gene.end))
}
cluster.gene(test.snp.m)
cluster.gene <- function(gene){
if (ncol(gene)>20){
distance.gene <- snpStats::ld(gene, gene, stats = "R.squared")
distance.gene <- as.dist(1 - distance.gene)
clust.tree.gene <- rioja::chclust(distance.gene)
k.gene <- cutree(clust.tree.gene, k = 1:(ncol(gene)-20))
max.gene <- sapply(1:(ncol(gene)-30),FUN=function(i){return(max(table(as.factor(k.gene[,i]))))})
id.gene <- which(max.gene<=20)[1]
}
else {
k.gene <- matrix(rep(1, ncol(gene)), ncol = 1)
rownames(k.gene) <- colnames(gene)
max.gene <- ncol(gene)
id.gene <- 1
}
division.gene.start <- c(1,1+as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))))
division.gene.end <- c(as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))),ncol(gene))
return(list(division.gene.start, division.gene.end))
}
cluster.gene(test.snp.m)
cluster.gene <- function(gene){
if (ncol(gene)>20){
distance.gene <- snpStats::ld(gene, gene, stats = "R.squared")
distance.gene <- as.dist(1 - distance.gene)
clust.tree.gene <- rioja::chclust(distance.gene)
k.gene <- cutree(clust.tree.gene, k = 1:(ncol(gene)-20))
max.gene <- sapply(1:(ncol(gene)-30),FUN=function(i){return(max(table(as.factor(k.gene[,i]))))})
id.gene <- which(max.gene<=20)[1]
}
else {
k.gene <- matrix(rep(1, ncol(gene)), ncol = 1)
rownames(k.gene) <- colnames(gene)
max.gene <- ncol(gene)
id.gene <- 1
}
division.gene.start <- c(1,1+as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))))
division.gene.end <- c(as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))),ncol(gene))
return(list(start = division.gene.start, end = division.gene.end))
}
cluster.gene(test.snp.m)
GBIGM(gguid.all$sample.info$affected, test.snp.m, test.snp.n)
test.gbigm <- GBIGM(gguid.all$sample.info$affected, test.snp.m, test.snp.n)
rm(InfoGainRat())
rm(InfoGainRat)
rm(percentofX)
rm(entropy.vec)
rm(base3to10())
rm(base3to10)
rm(GBIGM.test)
source("~/Desktop/GGIGCI.Raw.version/R/GBIGM.R")
test.phen <- gguid.all$sample.info$affected
test.phen
length(test.phen)
dim(test.snp.m)
dim(test.snp.n)
test.gbigm <- GBIGM(phen = test.phen, gene1 = test.snp.m, gene2 = test.snp.n)
test.gbigm
GBIGM
gene.gene.interaction <- function(data, n.times = 1000, selected.gene.list=NULL, gene.level = c("gene.level", "default", "minP")){
if (!inherits(data, "GGIGCI.data")) {
stop("data must be one of the class 'GGIGCI.data'(the output of the function impute.res).")
}
snp.info <- data$SnpMatrix
gene.info <- data$gene.info
sample.info <- data$sample.info
gene.level <- match.arg(gene.level)
#phen <- sample.info[,6]
if (is.null(selected.gene.list)) {
selected.gene.list <- unique(gene.info[, 2])
}
else if (any(!selected.gene.list%in%gene.info[,2])) {
stop("invaild gene selected.")
}
#else {
gene.info <- gene.info[which(gene.info[, 2]%in%selected.gene.list), ]
#}
if (any(sample.info[,2]!=rownames(snp.info))){
warning("miss match between sample info matrix and SnpMatrix.")
}
phen <- sample.info[,6]
p.val.matrix <- diag(0, nrow = length(selected.gene.list))
colnames(p.val.matrix) <- selected.gene.list
rownames(p.val.matrix) <- selected.gene.list
s.val.matrix <- diag(0, nrow = length(selected.gene.list))
colnames(s.val.matrix) <- selected.gene.list
rownames(s.val.matrix) <- selected.gene.list
interaction.pairs <- combn(selected.gene.list, 2)
gene.tabe <- data.frame(Genenames = selected.gene.list, Snps = table(gene.info[,2])[selected.gene.list])[,-2]
ggi.ud <- data.frame(from = interaction.pairs[1, ], to = interaction.pairs[2, ],
P.val = rep(0, length(interaction.pairs[1, ])), S.val = rep(0, length(interaction.pairs[1, ])))
nc.i <- ncol(interaction.pairs)
bar <- txtProgressBar(0, nc.i, char = ">", style = 3)
for(n in 1:nc.i){
gene1 <- interaction.pairs[1, n]
gene2 <- interaction.pairs[2, n]
snp.gene1 <- gene.info[which(gene.info[, 2]==gene1), 3]
snp.gene2 <- gene.info[which(gene.info[, 2]==gene2), 3]
snp.info.gene1 <- snp.info[, colnames(snp.info)%in%snp.gene1]
snp.info.gene2 <- snp.info[, colnames(snp.info)%in%snp.gene2]
#temp.result <- ifelse(gene.level, GBIGM.gene.level(phen = phen, gene1 = snp.info.gene1, gene2 = snp.info.gene2, n.times = n.times),
#GBIGM(phen = phen, gene1 = snp.info.gene1, gene2 = snp.info.gene2, n.times = n.times))
if (gene.level == "gene.level") {
temp.result <- GBIGM.gene.level(phen = phen, gene1 = snp.info.gene1, gene2 = snp.info.gene2, n.times = n.times)
}
else if (gene.level == "minP") {
#snp.info.gene1 <- fex(snp.info.gene1, gene.info[which(gene.info[, 2]==gene1), ])
#snp.info.gene2 <- fex(snp.info.gene2, gene.info[which(gene.info[, 2]==gene2), ])
division.gene1 <- cluster.gene(snp.info.gene1)
division.gene2 <- cluster.gene(snp.info.gene2)
pair.start <- expand.grid(division.gene1$start, division.gene2$start)
pair.end <- expand.grid(division.gene1$end, division.gene2$end)
temp.pair <- data.frame(start.gene1 = pair.end[,1], end.gene1 = pair.end[, 1], start.gene2 = pair.start[,2], end.gene2 = pair.end[, 2])
p.list <- rep(NA, nrow(temp.pair))
s.list <- rep(NA, nrow(temp.pair))
for(i in 1:nrow(temp.pair)){
sub.gene1 <- (temp.pair$start.gene1[i]):(temp.pair$end.gene1[i])
sub.gene2 <- (temp.pair$start.gene2[i]):(temp.pair$end.gene2[i])
sub.p.s <- GBIGM(phen = phen, snp.info.gene1[, sub.gene1], snp.info.gene2[, sub.gene2], n.times = n.times)
p.list[i] <- sub.p.s[1]
s.list[i] <- sub.p.s[2]
}
temp.result <- c(min(p.list), s.list[which.min(p.list)])
}
else if (gene.level == "default") {
temp.result <- GBIGM(phen = phen, gene1 = snp.info.gene1, gene2 = snp.info.gene2, n.times = n.times)
#temp.result <- GBIGM.test(Y = phen, G1 = snp.info.gene1, G2 = snp.info.gene2, n.perm = n.times)
}
p.val.matrix[gene1, gene2] <- p.val.matrix[gene2, gene1] <- temp.result[1]
#p.val.matrix[gene1, gene2] <- p.val.matrix[gene2, gene1] <- temp.result$p.val
s.val.matrix[gene1, gene2] <- s.val.matrix[gene2, gene1] <- temp.result[2]
#s.val.matrix[gene1, gene2] <- s.val.matrix[gene2, gene1] <- temp.result$statistic
#ggi.ud[n, 3:4] <- c(temp.result$p.val, temp.result$statistic)
ggi.ud[n, 3:4] <- temp.result
setTxtProgressBar(bar, n)
}
message("\n")
snp.matrix <- snp.info[, colnames(snp.info)%in%gene.info[,3]]
out <- list(SnpMatrix = snp.matrix, gene.info = gene.info, sample.info = sample.info,
GGI.ud = ggi.ud, GENE.table = gene.tabe, P.matrix = p.val.matrix, S.matrix = s.val.matrix)
class(out) <- c("GGIUD", "list")
return(out)
}
cluster.gene <- function(gene){
if (ncol(gene)>20){
distance.gene <- snpStats::ld(gene, gene, stats = "R.squared")
distance.gene <- as.dist(1 - distance.gene)
clust.tree.gene <- rioja::chclust(distance.gene)
k.gene <- cutree(clust.tree.gene, k = 1:(ncol(gene)-20))
max.gene <- sapply(1:(ncol(gene)-30),FUN=function(i){return(max(table(as.factor(k.gene[,i]))))})
id.gene <- which(max.gene<=20)[1]
}
else {
k.gene <- matrix(rep(1, ncol(gene)), ncol = 1)
rownames(k.gene) <- colnames(gene)
max.gene <- ncol(gene)
id.gene <- 1
}
division.gene.start <- c(1,1+as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))))
division.gene.end <- c(as.numeric(which(sapply(1:(length(k.gene[,id.gene])-1),FUN=function(i){return(k.gene[,id.gene][i]!=k.gene[,id.gene][i+1])}))),ncol(gene))
return(list(start = division.gene.start, end = division.gene.end))
}
ls(pattern = "test")
test.case
ls(pattern = "test")
rm(test.case)
rm(test.control)
dim(test.case.m)
dim(test.case.m)
rm(test.case.m)
rm(test.control.m)
test.d
rm(test.d)
ls(pattern = "test")
rm(test.gbigm)
test.gene
rm(test.gene)
head(test.gene.info)
rm(test.gene.info)
test.k
rm(test.k)
rm(test.tree)
test.snp.f
rm(test.snp.f)
rm(test.snp.m)
rm(test.sn)
rm(test.snp.n)
ls(pattern = "test")
test.phen
rm(test.phen)
rm(test.snp.list)
gguid.all$GENE.table
gguid.all.add.minP
gene.combn
for (i in 1:dim(gene.combn)[1]) {
gene1 <- gene.combn[i, 1]
gene2 <- gene.combn[i, 2]
message(paste0("the shortest routes between ", gene1, " and ", gene2))
protein1 <- all.protein$ensp.id[which(all.protein$gene.symbol==gene1)]
protein2 <- all.protein$ensp.id[which(all.protein$gene.symbol==gene2)]
#print(paste0(protein1, " and ", protein2))
path1to2 <- shortest_paths(string.graph, from = protein1, to = protein2,
mode = "all", weights = E(string.graph)$distance)$vpath
#print(path1to2)
for (path in path1to2){
idx <- as.vector(path)
route <- names(V(string.graph)[idx])
#print(route)
route <- all.protein$gene.symbol[which(all.protein$ensp.id%in%route)]
print(route)
}
path1to2 <- shortest_paths(string.graph, from = protein1, to = protein2,
mode = "all", weights = NA, output = "both")$epath[[1]]
idx <- as.vector(path1to2)
print(protein.links[idx, ])
message("distance: ", sum(protein.links$distance[idx]))
}
source("~/Desktop/GGIGCI.Raw.version/R/gene.gene.causal.R")
gguid.all.p
rm(gguid.all.p)
source("~/Desktop/GGIGCI.Raw.version/R/igci.R")
ggc.all <- gene.gene.causal(gguid.all.add.minP)
ggc.all
ggc.all.fex <- gene.gene.causal(gguid.all.add.minP, fex = T)
ggc.all.fex
ggc.all <- gene.gene.causal(gguid.all.add.minP, fex = F)
ggc.all
for (i in 1:dim(gene.combn)[1]) {
gene1 <- gene.combn[i, 1]
gene2 <- gene.combn[i, 2]
message(paste0("the shortest routes between ", gene1, " and ", gene2))
protein1 <- all.protein$ensp.id[which(all.protein$gene.symbol==gene1)]
protein2 <- all.protein$ensp.id[which(all.protein$gene.symbol==gene2)]
#print(paste0(protein1, " and ", protein2))
#path1to2 <- shortest_paths(string.graph, from = protein1, to = protein2,
#mode = "all", weights = E(string.graph)$distance)$vpath
#print(path1to2)
#for (path in path1to2){
#  idx <- as.vector(path)
#  route <- names(V(string.graph)[idx])
#  #print(route)
#  route <- all.protein$gene.symbol[which(all.protein$ensp.id%in%route)]
#  print(route)
#}
path1to2 <- shortest_paths(string.graph, from = protein1, to = protein2,
mode = "all", weights = NA, output = "both")$epath[[1]]
idx <- as.vector(path1to2)
print(protein.links[idx, ])
message("distance: ", sum(protein.links$distance[idx]))
}
save.image(file = "~/Desktop/history.rdata/data.second.gbigm20200112.rda")
gguid.all.add.minP
test.p <- gguid.all.add.minP$GGI.ud$P.val
test.p
p.adjust(test.p, "BH")
source("~/Desktop/GGIGCI.Raw.version/R/gene.gene.interaction.R")
gguid.all.add.minP.adjust <- gene.gene.interaction(res, gene.level = "minP")
save.image(file = "~/Desktop/history.rdata/data.second.gbigm20200112.rda")
gguid.all.add.minP.adjust
rm(string.graph)
save.image(file = "~/Desktop/history.rdata/data.second.gbigm20200112.rda")
load("~/Desktop/GGIGCI.Raw.version/")
setwd("~/Desktop/GGIGCI.Raw.version/")
load("~/Desktop/history.rdata/mac20201207.RData")
res
temp.im
source("~/Desktop/GGIGCI.Raw.version/R/gene.gene.interaction.R")
source("~/Desktop/GGIGCI.Raw.version/R/GBIGM.R")
gguid.normal
gguid.normal.multi.loci
hehe
rm(hehe)
interaction.136
gene.multi.loci
gene.distance.136 <- read.table("~/Desktop/gene.distance.tsv")
gene.distance.136
gene.distance.136 <- read.table("~/Desktop/gene.distance.tsv")
gene.distance.136 <- gene.distance.136[, 2:5]
head(gene.distance.136)
colnames(gene.distance.136) <- c("protein1", "protein2", "step", "distance")
head(gene.distance.136)
gguid.normal$P.matrix
tmep
temp
x
x <- gguid.normal$P.matrix
colnames(x)
colnames(x)[6]
rownames(x)[6]
colnames(x)[6] <- rownames(x)[6] <- "DAOA"
x
V.list.first.comb.h
coord.h.17[16, ]
coord.h.17[coord.h.17$gene.symbol=="KCNN3", ]
coord.h.17[coord.h.17$gene.symbol=="DAOA", ]
coord.h.17[coord.h.17$gene.symbol=="KCNN3", 6:8]
coord.h.17[coord.h.17$gene.symbol=="KCNN3", 6:8] - coord.h.17[coord.h.17$gene.symbol=="DAOA", 6:8]
(coord.h.17[coord.h.17$gene.symbol=="KCNN3", 6:8] - coord.h.17[coord.h.17$gene.symbol=="DAOA", 6:8])^2
sum((coord.h.17[coord.h.17$gene.symbol=="KCNN3", 6:8] - coord.h.17[coord.h.17$gene.symbol=="DAOA", 6:8])^2)
sqrt(sum((coord.h.17[coord.h.17$gene.symbol=="KCNN3", 6:8] - coord.h.17[coord.h.17$gene.symbol=="DAOA", 6:8])^2))
V.list.first.comb.h
compare.normal.to.h
compare.normal.to.I
pair.136.compare <- gene.distance.136
gene1
class(gene1)
length(gene1)
gene2
V.list.first.comb.h$gene1%in%gene.pairs
V.list.first.comb.h[,1:2]==gene.pairs
all(V.list.first.comb.h[,1:2]==gene.pairs)
sapply(1:136, FUN = function(i){return(which(all(V.list.first.comb.h[i, 1:2]%in%gene.pairs)))})
sapply(1:136, FUN = function(i){return(all(V.list.first.comb.h[i, 1:2]%in%gene.pairs))})
which(sapply(1:136, FUN = function(i){return(all(V.list.first.comb.h[i, 1:2]%in%gene.pairs))}))
V.list.first.comb.h[10, ]
V.list.first.comb.h$distance.coordinate
V.list.first.comb.h$distance.coordinate[1]
as.numeric(V.list.first.comb.h$distance.coordinate[1])
pair.136.compare$distance.I <- NA
pair.136.compare$distance.H <- NA
pair.136.compare$p.val <- NA
pair.136.compare$s.val <- NA
head(pair.136.compare)
x
y
y <- gguid.normal$S.matrix
y
colnames(y)[6] <- rownames(y)[6] <- "DAOA"
for(i in 1:nrow(gene.distance.136)) {
gene1 <- gene.distance.136[i,1]
gene2 <- gene.distance.136[i,2]
pair.136.compare$p.val[i] <- x[gene1, gene2]
pair.136.compare$s.val[i] <- y[gene1, gene2]
pair.136.compare$distance.I[i] <- as.numeric(V.list.first.comb.I$distance.coordinate[which(sapply(1:nrow(V.list.first.comb.I),
FUN = function(k){return(all(V.list.first.comb.I[k, 1:2]%in%c(gene1, gene2)))}))])
pair.136.compare$distance.H[i] <- as.numeric(V.list.first.comb.h$distance.coordinate[which(sapply(1:nrow(V.list.first.comb.h),
FUN = function(k){return(all(V.list.first.comb.h[k, 1:2]%in%c(gene1, gene2)))}))])
}
head(pair.136.compare)
V.list.first.comb.I$gene1
V.list.first.comb.I[V.list.first.comb.I$gene1=="COMT",]
V.list.first.comb.h[V.list.first.comb.h$gene1=="COMT",]
cor(pair.136.compare[, 3:8])
gguid.normal.multi.loci.default <- gene.gene.interaction(temp.im, gene.level = "default", selected.gene.list = gene.multi.loci)
gguid.normal.default
gguid.normal.multi.loci.default
temp
temp[which(temp$gene.symbol%in%gene.multi.loci)]
temp[which(temp$gene.symbol%in%gene.multi.loci), ]
gene.distance.136 <- read.table("~/Desktop/gene.distance.tsv")
gene.distance.136 <- gene.distance.136[, 2:5]
colnames(gene.distance.136) <- c("protein1", "protein2", "step", "distance")
pair.136.compare <- gene.distance.136
x <- gguid.normal.default$P.matrix
y <- gguid.normal.default$S.matrix
pair.136.compare$distance.I <- NA
pair.136.compare$distance.H <- NA
pair.136.compare$p.val <- NA
pair.136.compare$s.val <- NA
colnames(x)[6] <- rownames(x)[6] <- "DAOA"
colnames(y)[6] <- rownames(y)[6] <- "DAOA"
for(i in 1:nrow(gene.distance.136)) {
gene1 <- gene.distance.136[i,1]
gene2 <- gene.distance.136[i,2]
pair.136.compare$p.val[i] <- x[gene1, gene2]
pair.136.compare$s.val[i] <- y[gene1, gene2]
pair.136.compare$distance.I[i] <- as.numeric(V.list.first.comb.I$distance.coordinate[which(sapply(1:nrow(V.list.first.comb.I),
FUN = function(k){return(all(V.list.first.comb.I[k, 1:2]%in%c(gene1, gene2)))}))])
pair.136.compare$distance.H[i] <- as.numeric(V.list.first.comb.h$distance.coordinate[which(sapply(1:nrow(V.list.first.comb.h),
FUN = function(k){return(all(V.list.first.comb.h[k, 1:2]%in%c(gene1, gene2)))}))])
}
pair.136.compare
pair.136.compare[pair.136.compare$protein1%in%gene.multi.loci, ][pair.136.compare$protein2%in%gene.multi.loci, ]
gene.multi.loci
pair.136.compare[pair.136.compare$protein1%in%gene.multi.loci & pair.136.compare$protein2%in%gene.multi.loci, ]
pair.136.compare[pair.136.compare$protein1%in%gene.multi.loci & pair.136.compare$protein2%in%gene.multi.loci, c(1,2, 7)]
gguid.normal.multi.loci.default$GGI.ud
cor(pair.136.compare[pair.136.compare$protein1%in%gene.multi.loci & pair.136.compare$protein2%in%gene.multi.loci, 7], gguid.normal.multi.loci.default$GGI.ud$P.val)
pair.136.compare$p.adjsut <- p.adjust(pair.136.compare$p.val, method = "BH")
pair.136.compare
pair.136.compare$uid <- ifelse(pair.136.compare$p.val<=0.05, 1, 0)
#########the example code for plotting the heatmap#####################
require(reshape2)
p.heatmap.normal.default <- ggplot(gguid.normal.default$GGI.ud, aes(from, to)) +
geom_tile(aes(fill = P.val), colour = "white")
p.heatmap.normal.default + scale_fill_gradient(name="P.value", low = "red",high = "white") +
geom_text(aes(from, to, label = P.val), color = "black", size = 3)
get.auc.table.default <- function(gene.table, pair.compare, k = 1){
auc.list.weight <- NULL
auc.list.coordinate.h <- NULL
auc.list.coordinate.I <- NULL
for (i in k:8){
gene.most.loci <- gene.table[gene.table$Snps.Freq>=i, 1]
#correct the gene name
gene.most.loci <- ifelse(gene.most.loci=="G72/G30", "DAOA", gene.most.loci)
temp.compare <- pair.compare[pair.compare[,1]%in%gene.most.loci & pair.compare[,2]%in%gene.most.loci, ]
roc.temp.weight <- roc(temp.compare$uid, temp.compare$distance)
#roc.temp.weight <- roc(temp.compare$uid, temp.compare$distance.weight, levels = c("1", "0"), direction = "<")
roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.H)
#roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.coordinate, levels = c("1", "0"), direction = "<")
auc.list.weight <- c(auc.list.weight, auc(roc.temp.weight))
auc.list.coordinate.h <- c(auc.list.coordinate.h, auc(roc.temp.coordinate))
roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.I)
#roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.coordinate, levels = c("1", "0"), direction = "<")
auc.list.coordinate.I <- c(auc.list.coordinate.I, auc(roc.temp.coordinate))
}
auc.temp <- data.frame(n = c(1:8),
coordinate.h = auc.list.coordinate.h,
coordinate.I = auc.list.coordinate.I,
weight = auc.list.weight)
return(auc.temp)
}
get.auc.table.default(gguid.normal.default$GENE.table, pair.136.compare, k= 1)
require(pROC)
?roc
??roc
install.packages("pROC")
get.auc.table.default <- function(gene.table, pair.compare, k = 1){
auc.list.weight <- NULL
auc.list.coordinate.h <- NULL
auc.list.coordinate.I <- NULL
for (i in k:8){
gene.most.loci <- gene.table[gene.table$Snps.Freq>=i, 1]
#correct the gene name
gene.most.loci <- ifelse(gene.most.loci=="G72/G30", "DAOA", gene.most.loci)
temp.compare <- pair.compare[pair.compare[,1]%in%gene.most.loci & pair.compare[,2]%in%gene.most.loci, ]
roc.temp.weight <- roc(temp.compare$uid, temp.compare$distance)
#roc.temp.weight <- roc(temp.compare$uid, temp.compare$distance.weight, levels = c("1", "0"), direction = "<")
roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.H)
#roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.coordinate, levels = c("1", "0"), direction = "<")
auc.list.weight <- c(auc.list.weight, auc(roc.temp.weight))
auc.list.coordinate.h <- c(auc.list.coordinate.h, auc(roc.temp.coordinate))
roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.I)
#roc.temp.coordinate <- roc(temp.compare$uid, temp.compare$distance.coordinate, levels = c("1", "0"), direction = "<")
auc.list.coordinate.I <- c(auc.list.coordinate.I, auc(roc.temp.coordinate))
}
auc.temp <- data.frame(n = c(1:8),
coordinate.h = auc.list.coordinate.h,
coordinate.I = auc.list.coordinate.I,
weight = auc.list.weight)
return(auc.temp)
}
get.auc.table.default(gguid.normal.default$GENE.table, pair.136.compare, k= 1)
detach(pROC)
detach("pROC")
library(pROC)
get.auc.table.default(gguid.normal.default$GENE.table, pair.136.compare, k= 1)
install.packages("pROC", dependencies = T)
remove.packages("pROC")
install.packages("pROC")
save.image(file = "~/Desktop/history.rdata/mac20201207.RData")
temp
temp[temp$gene.symbol%in%gene.multi.loci, ]
q()
